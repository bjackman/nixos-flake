#!/bin/bash
#
# Usage:
#     benchmark-variants [options] --benchmark BENCHMARK HOST VARIANT [VARIANT...]
#     benchmark-variants --help
#
# Options:
#     -h --help              Show this screen.
#     --instrument           Run instrumentation for these benchmarks
#     --result-db RESULT_DB  Magic result database to upload to [default: ./results].
#     --ssh-port PORT        Port for SSH [default: 22]
#     --benchmark BENCHMARK  Either 'fio' or 'compile-kernel'
#     HOST                   Hostname/IP of target. All other options (port, user) hardcoded.
#     VARIANT                System variant to use for nixos-rebuild (e.g. aethelred-asi-off).

NIX_SSHOPTS=${NIX_SSHOPTS:-}

set -eu -o pipefail

source docopts.sh --auto -G "$@"

USER=brendan  # good user, good 2 hard code

function do_ssh() {
    ssh -p "$ARGS_ssh_port" "$USER@$ARGS_HOST" "$@"
}

if [ -d results-latest ]; then
    rm -rf results-latest
fi
mkdir results-latest

for variant in "${ARGS_VARIANT[@]}"; do
    NIX_SSHOPTS="$NIX_SSHOPTS -p $ARGS_ssh_port" nixos-rebuild \
        --flake ".#$variant" --target-host "$USER@$ARGS_HOST" --use-remote-sudo switch
    # Use boot.json as a funny hack to detect if we need to reboot. I am not
    # that confident in this trick...
    ssh "$USER@$ARGS_HOST" <<EOF
        if ! cmp /run/current-system/boot.json /run/booted-system/boot.json; then
            sudo reboot
        else
            echo -e "\n\n\n  !!! NOT REBOOTING as boot.json is unchanged !!! \n\n"
        fi
EOF

    # Wait until the SSH port becomes visible.
    # -z = scan only,  -w5 = 5s timeout
    deadline_s=$(($(date +%s) + 120))
    while ! ssh -o ConnectTimeout=5 "$USER@$ARGS_HOST" echo; do
        current_time_s=$(date +%s)
        if (( current_time_s > deadline_s )); then
            echo "Timed out after 2m waiting for host SSH port to appear"
            exit 1
        fi
        sleep 1
    done

    # Run the benchmarks
    REMOTE_RESULTS_DIR=/tmp/benchmark-results
    # shellcheck disable=SC2029
    do_ssh "rm -rf $REMOTE_RESULTS_DIR; mkdir $REMOTE_RESULTS_DIR"
    cmd="benchmarks-wrapper --out-dir $REMOTE_RESULTS_DIR $ARGS_benchmark"
    if "$ARGS_instrument"; then
        cmd="$cmd --instrument"
    fi
    do_ssh "$cmd"

    # Fetch the results
    local_results_dir=$(mktemp -d)
    scp -P "$ARGS_ssh_port" -r "$USER@$ARGS_HOST":"$REMOTE_RESULTS_DIR/*" "$local_results_dir"

    # Hash them and store them in the format required by my cool secret
    # benchmarking result schema: $name:$hash.
    # This will import to the default Falba DB location i.e. ./results/
    falba import $ARGS_benchmark "$local_results_dir"/*
done