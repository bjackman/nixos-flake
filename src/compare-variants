#!/usr/bin/env bash
#
# Wrapper for 'falba compare with some ASI-benchmarking specific defaults.
#
# Usage:
#     compare-variants [--config-revision REV] [--instrumented] [--metric METRIC] [ --test TEST ]
#     compare-variants --help
#
# Options:
#     -h --help              Show this screen.
#     --config-revision REV  NixOS configuration revision to compare variants
#                            of. This is a Git commit hash. If not specified,
#                            uses HEAD from CWD. Unlike if you were using falba
#                            directly, this doesn't need to be a full commit
#                            hash.
#     --instrumented         Compare instrumented runs instead of ignoring them.
#     --metric METRIC        Metric to compare [default: fio_randread_tmpfs_read_iops].
#     --test TEST            Forwarded to Falba CLI's --test arg.

set -eu -o pipefail

source docopts.sh --auto -G "$@"

if [ -z "$ARGS_config_revision" ]; then
    if ! [ -z "$(git status --porcelain)" ]; then
        echo "Git tree is dirty, --config-revision must be specified"
        exit 1
    fi
    CONFIG_REVISION="$(git rev-parse HEAD)"
else
    CONFIG_REVISION="$(git rev-parse "$ARGS_config_revision")"
fi

if "$ARGS_instrumented"; then
    INSTRUMENTED=true
else
    # The enricher only ever sets the value to true.
    INSTRUMENTED=none
fi

declare -a extra_args
if [ -n "$ARGS_test" ]; then
    extra_args+=("--test" "$ARGS_test")
fi

# nixos_system is fully derivative of the other facts so we ignore that.
# (This is a workaround for a silly Falba limitation, it should be able to
# detect that it doesn't matter).

falba compare \
    --fact-eq-bool instrumented "$INSTRUMENTED" \
    --fact-eq nixos_configuration_revision "$CONFIG_REVISION" \
    --ignore-fact nixos_system \
    os_release_variant_id "$ARGS_metric" "${extra_args[@]}"