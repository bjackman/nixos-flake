#!/usr/bin/env python3

import argparse
import pathlib

import falba
import falba.model

def dump_result(result: falba.model.Result):
    print(f"Result({result.test_name}:{result.result_id})")
    print("\tfacts:")
    for fact in result.facts.values():
        print(f"\t\t{fact.name:<30}: {fact.value}")
    print("\tmetrics:")
    for metric in result.metrics:
        print(f"\t\t{metric.name:<30}: {metric.value}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--config-revision", required=True)
    parser.add_argument("variants", nargs="+")
    args = parser.parse_args()

    db = falba.Db.read_dir(pathlib.Path("./results"))
    for enricher in falba.ENRICHERS:
        db.enrich_with(enricher)
    for deriver in falba.DERIVERS:
        db.derive_with(deriver)

    df = db.flat_df()
    df = df[df["nixos_configuration_revision"] == args.config_revision]

    # Currently hard-coding a single metric...
    experiment_metric = "fio_randread_read_clat_ns_mean"
    df = df[df["metric"] == experiment_metric]

    missing_variants = set(args.variants) - set(df["os_release_variant_id"])
    if missing_variants:
        print(f"No results for variants {missing_variants}")
    df = df[df["os_release_variant_id"].isin(args.variants)]

    for name, group in df.groupby("os_release_variant_id"):
        print(f"{name:<30} mean {experiment_metric}: {group["value"].mean()}")
